ref    compiler/GHC/Builtin/PrimOps.hs:329:7:     Note [Core let/app invariant]
ref    compiler/GHC/Core.hs:178:10:     Note [Core let/app invariant]
ref    compiler/GHC/Core.hs:189:10:     Note [Core let/app invariant]
ref    compiler/GHC/Core.hs:520:3:     Note [exprOkForSpeculation and type classes]
ref    compiler/GHC/Core/Coercion/Axiom.hs:458:2:     Note [RoughMap and rm_empty]
ref    compiler/GHC/Core/Lint.hs:635:15:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Make.hs:120:47:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Make.hs:146:9:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Make.hs:161:9:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Make.hs:175:9:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Make.hs:190:9:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Opt/Arity.hs:610:5:     Note [Combining case branches]
ref    compiler/GHC/Core/Opt/Arity.hs:1298:0:     Note [ArityType for let-bindings]
ref    compiler/GHC/Core/Opt/ConstantFold.hs:1413:15:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Opt/OccurAnal.hs:851:15:     Note [Loop breaking]
ref    compiler/GHC/Core/Opt/SetLevels.hs:1598:30:     Note [Top level scope]
ref    compiler/GHC/Core/Opt/Simplify.hs:1708:17:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Opt/Simplify.hs:2672:13:     Note [Case binder next]
ref    compiler/GHC/Core/Opt/Simplify.hs:3294:0:     Note [Suppressing binder-swaps on linear case]
ref    compiler/GHC/Core/Opt/Simplify.hs:3844:8:     Note [Lambda-bound unfoldings]
ref    compiler/GHC/Core/Opt/Simplify.hs:4200:33:     Note [Do not eta-expand trivial expressions]
ref    compiler/GHC/Core/Opt/Simplify/Utils.hs:1240:37:     Note [Gentle mode]
ref    compiler/GHC/Core/Opt/Simplify/Utils.hs:1294:7:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Opt/Simplify/Utils.hs:1420:7:     Note [Core let/app invariant]
ref    compiler/GHC/Core/Opt/Specialise.hs:1588:28:     Note [Arity decrease]
ref    compiler/GHC/Core/RoughMap.hs:183:35:     Note [RoughMatch and beta reduction]
ref    compiler/GHC/Core/Subst.hs:100:60:     Note [Apply once]
ref    compiler/GHC/Core/Subst.hs:111:16:     Note [Extending the TCvSubst]
ref    compiler/GHC/Core/TyCo/FVs.hs:286:7:     Note [Free variables of Coercions]
ref    compiler/GHC/Core/TyCo/Ppr.hs:71:23:     Note [IfaceType and pretty-printing]
ref    compiler/GHC/Core/TyCo/Rep.hs:1748:31:     Note [What prevents a constraint from floating]
ref    compiler/GHC/Core/TyCo/Subst.hs:784:15:     Note [Extending the TCvSubst]
ref    compiler/GHC/Core/TyCo/Subst.hs:1001:15:     Note [Extending the TCvSubst]
ref    compiler/GHC/Core/TyCon.hs:966:35:     Note [Promoted GADT data construtors]
ref    compiler/GHC/Core/TyCon.hs:2472:62:     Note [Sharing nullary TyCons]
ref    compiler/GHC/Core/Unfold.hs:1174:23:     Note [INLINE for small functions (3)]
ref    compiler/GHC/Core/Unfold.hs:1245:50:     Note [Unfold info lazy contexts]
ref    compiler/GHC/Core/Unfold/Make.hs:157:34:     Note [DFunUnfoldings]
ref    compiler/GHC/Core/Unify.hs:1492:9:     Note [INLINE pragmas and (>>)]
ref    compiler/GHC/Core/Utils.hs:952:40:     Note [ _       -> [con1]
ref    compiler/GHC/CoreToStg.hs:463:15:     Note [Nullary unboxed tuple]
ref    compiler/GHC/Driver/Main.hs:1594:34:     Note [simpleTidyPgm - mkBootModDetailsTc]
ref    compiler/GHC/Driver/Session.hs:1997:36:     Note [GHC.Driver.Main . Safe Haskell Inference]
ref    compiler/GHC/Driver/Session.hs:3991:49:     Note [Eta-reduction in -O0]
ref    compiler/GHC/Hs/Extension.hs:140:5:     Note [Strict argument type constraints]
ref    compiler/GHC/HsToCore/Binds.hs:313:33:     Note [AbsBinds wrappers]
ref    compiler/GHC/HsToCore/Binds.hs:850:46:     Note [Free dictionaries]
ref    compiler/GHC/HsToCore/Binds.hs:884:36:     Note [Free tyvars in rule LHS]
ref    compiler/GHC/HsToCore/Binds.hs:885:35:     Note [Free dictionaries in rule LHS]
ref    compiler/GHC/HsToCore/Binds.hs:943:24:     Note [Free dictionaries]
ref    compiler/GHC/HsToCore/Binds.hs:1000:34:     Note [Dead spec binders]
ref    compiler/GHC/HsToCore/Docs.hs:272:70:     Note [1]
ref    compiler/GHC/HsToCore/Docs.hs:276:0:     Note [1]
ref    compiler/GHC/HsToCore/Pmc/Solver.hs:855:20:     Note [COMPLETE sets on data families]
ref    compiler/GHC/HsToCore/Types.hs:61:13:     Note [Generating fresh names for FFI wrappers]
ref    compiler/GHC/HsToCore/Utils.hs:942:62:     Note [Don't CPR join points]
ref    compiler/GHC/Iface/Syntax.hs:708:0:     Note [Minimal complete definition]
ref    compiler/GHC/Iface/Syntax.hs:768:44:     Note [Minimal complete definition]
ref    compiler/GHC/Parser/Lexer.x:188:7:     Note [Lexing NumericUnderscores extension]
ref    compiler/GHC/Parser/Lexer.x:505:3:     Note [Lexing NumericUnderscores extension]
ref    compiler/GHC/Rename/Expr.hs:2043:9:     Note [ApplicativeDo and strict patterns]
ref    compiler/GHC/Rename/Expr.hs:2082:12:     Note [ApplicativeDo and refutable patterns]
ref    compiler/GHC/Rename/Expr.hs:2166:18:     Note [ApplicativeDo and strict patterns]
ref    compiler/GHC/Rename/Expr.hs:2184:0:     Note [ApplicativeDo and strict patterns]
ref    compiler/GHC/Rename/Expr.hs:2239:0:     Note [ApplicativeDo and refutable patterns]
ref    compiler/GHC/Rename/Pat.hs:888:29:     Note [Disambiguating record fields]
ref    compiler/GHC/Rename/Splice.hs:478:27:     Note [Splices]
ref    compiler/GHC/Runtime/Eval.hs:995:2:     Note [Querying instances for a type]
ref    compiler/GHC/Runtime/Interpreter.hs:198:30:     Note [uninterruptibleMask_]
ref    compiler/GHC/Stg/Lint.hs:9:56:     Note [Core let/app invariant]
ref    compiler/GHC/StgToCmm.hs:106:18:     Note [codegen-split-init]
ref    compiler/GHC/StgToCmm.hs:109:18:     Note [pipeline-split-init]
ref    compiler/GHC/StgToCmm/Expr.hs:579:4:     Note [case on bool]
ref    compiler/GHC/StgToCmm/Expr.hs:847:3:     Note [alg-alt heap check]
ref    compiler/GHC/Tc/Errors.hs:178:13:     Note [Fail fast on kind errors]
ref    compiler/GHC/Tc/Errors.hs:2239:0:     Note [Highlighting ambiguous type variables]
ref    compiler/GHC/Tc/Errors/Ppr.hs:2074:11:     Note [Highlighting ambiguous type variables]
ref    compiler/GHC/Tc/Gen/Arrow.hs:438:29:     Note [RecStmt]
ref    compiler/GHC/Tc/Gen/Bind.hs:1368:19:     Note [Existentials in pattern bindings]
ref    compiler/GHC/Tc/Gen/Export.hs:188:15:     Note [Modules without a module header]
ref    compiler/GHC/Tc/Gen/Export.hs:423:0:     Note [Modules without a module header]
ref    compiler/GHC/Tc/Gen/Export.hs:581:7:     Note [Typing Pattern Synonym Exports]
ref    compiler/GHC/Tc/Gen/Export.hs:620:16:     Note [Types of TyCon]
ref    compiler/GHC/Tc/Gen/Expr.hs:662:24:     Note [Disambiguating record fields]
ref    compiler/GHC/Tc/Gen/Expr.hs:679:15:     Note [Mixed Record Selectors]
ref    compiler/GHC/Tc/Gen/Expr.hs:1195:7:     Note [Disambiguating record fields]
ref    compiler/GHC/Tc/Gen/Expr.hs:1298:11:     Note [Deprecating ambiguous fields]
ref    compiler/GHC/Tc/Gen/Foreign.hs:149:26:     Note [Expanding newtypes]
ref    compiler/GHC/Tc/Gen/HsType.hs:551:56:     Note [Skolem escape prevention]
ref    compiler/GHC/Tc/Gen/HsType.hs:2632:7:     Note [Matching a kind sigature with a declaration]
ref    compiler/GHC/Tc/Gen/Match.hs:541:20:     Note [GroupStmt binder map]
ref    compiler/GHC/Tc/Gen/Match.hs:734:20:     Note [GroupStmt binder map]
ref    compiler/GHC/Tc/Gen/Match.hs:999:0:     Note [typechecking ApplicativeStmt]
ref    compiler/GHC/Tc/Gen/Pat.hs:171:20:     Note [Typing patterns in pattern bindings]
ref    compiler/GHC/Tc/Gen/Pat.hs:480:7:     Note [Pattern coercions]
ref    compiler/GHC/Tc/Gen/Pat.hs:1107:7:     Note [Matching polytyped patterns]
ref    compiler/GHC/Tc/Gen/Pat.hs:1407:16:     Note [Pattern coercions]
ref    compiler/GHC/Tc/Gen/Sig.hs:78:10:     Note [Overview of type signatures]
ref    compiler/GHC/Tc/Instance/Family.hs:515:35:     Note [Constrained family instances]
ref    compiler/GHC/Tc/Module.hs:705:15:     Note [Extra dependencies from .hs-boot files]
ref    compiler/GHC/Tc/Module.hs:1916:19:     Note [Root-main id]
ref    compiler/GHC/Tc/Module.hs:1986:6:     Note [Root-main id]
ref    compiler/GHC/Tc/Solver/Canonical.hs:1087:33:     Note [Canonical LHS]
ref    compiler/GHC/Tc/Solver/Interact.hs:1619:9:     Note [No touchables as FunEq RHS]
ref    compiler/GHC/Tc/Solver/Interact.hs:2305:12:     Note [The equality class story]
ref    compiler/GHC/Tc/Solver/Rewrite.hs:988:7:     Note [Stability of rewriting]
ref    compiler/GHC/Tc/TyCl.hs:627:3:     Note [Single function non-recursive binding special-case]
ref    compiler/GHC/Tc/TyCl.hs:1106:6:     Note [Unification variables need fresh Names]
ref    compiler/GHC/Tc/TyCl.hs:1895:13:     Note [TyConBinders for the result kind signatures of a data type]
ref    compiler/GHC/Tc/TyCl.hs:4362:16:     Note [rejigCon and c.f. Note [Check role annotations in a second pass]
ref    compiler/GHC/Tc/TyCl/Instance.hs:947:26:     Note [Generalising in tcFamTyPatsGuts]
ref    compiler/GHC/Tc/Types.hs:653:17:     Note [Generating fresh names for FFI wrappers]
ref    compiler/GHC/Tc/Types.hs:702:33:     Note [Extra dependencies from .hs-boot files]
ref    compiler/GHC/Tc/Types.hs:1160:28:     Note [Don't promote data constructors with non-equality contexts]
ref    compiler/GHC/Tc/Types.hs:1236:36:     Note [Bindings with closed types]
ref    compiler/GHC/Tc/Types.hs:1472:47:     Note [Care with plugin imports]
ref    compiler/GHC/Tc/Types/Constraint.hs:254:34:     Note [NonCanonical Semantics]
ref    compiler/GHC/Tc/Utils/Env.hs:556:7:     Note [Bindings with closed types]
ref    compiler/GHC/Tc/Utils/Env.hs:1128:7:     Note [Generating fresh names for ccall wrapper]
ref    compiler/GHC/Tc/Utils/Env.hs:1141:0:     Note [Generating fresh names for FFI wrappers]
ref    compiler/GHC/Tc/Utils/Env.hs:1192:7:     Note [Placeholder PatSyn kinds]
ref    compiler/GHC/Tc/Utils/TcMType.hs:750:7:     Note [Kind checking for GADTs]
ref    compiler/GHC/Tc/Utils/TcType.hs:591:7:     Note [TyVars and TcTyVars]
ref    compiler/GHC/ThToHs.hs:1788:11:     Note [Adding parens for splices]
ref    compiler/GHC/ThToHs.hs:1799:3:     Note [Adding parens for splices]
ref    compiler/GHC/Types/Basic.hs:624:17:     Note [Safe Haskell isSafeOverlap]
ref    compiler/GHC/Types/Basic.hs:1370:7:     Note [Activation competition]
ref    compiler/GHC/Types/Demand.hs:310:25:     Note [Preserving Boxity of results is rarely a win]
ref    compiler/GHC/Types/Demand.hs:1142:4:     Note [Use one-shot information]
ref    compiler/GHC/Types/Error.hs:358:3:     Note [Suppressing Messages]
ref    compiler/GHC/Types/Error.hs:393:28:     Note [Suppressing Messages]
ref    compiler/GHC/Types/Name/Occurrence.hs:301:4:     Note [Unique OccNames from Template Haskell]
ref    compiler/GHC/Types/Unique.hs:78:25:     Note [Uniques-prelude - Uniques for wired-in Prelude things]
ref    compiler/GHC/Unit/Module/Deps.hs:82:13:     Note [Structure of dep_boot_mods]
ref    compiler/GHC/Utils/Monad.hs:391:34:     Note [multiShotIO]
ref    compiler/Language/Haskell/Syntax/Binds.hs:204:31:     Note [fun_id in Match]
ref    compiler/Language/Haskell/Syntax/Expr.hs:1571:32:     Note [Quasi-quote overview]
ref    compiler/Language/Haskell/Syntax/Pat.hs:336:12:     Note [Disambiguating record fields]
ref    configure.ac:213:10:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    docs/core-spec/core-spec.mng:177:6:     Note [TyBinders]
ref    ghc/GHCi/UI.hs:3648:25:     Note [ModBreaks.decls]
ref    ghc/ghc.mk:57:6:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    hadrian/src/Expression.hs:134:30:     Note [Linking ghc-bin against threaded stage0 RTS]
ref    libraries/base/GHC/ST.hs:134:7:     Note [Definition of runRW#]
ref    linters/lint-notes/Notes.hs:32:29:     Note [" <> T.unpack x <> "]
ref    linters/lint-notes/Notes.hs:69:22:     Note [...]
ref    testsuite/config/ghc:243:10:     Note [WayFlags]
ref    testsuite/driver/testlib.py:152:10:     Note [Why is there no stage1 setup function?]
ref    testsuite/driver/testlib.py:156:2:     Note [Why is there no stage1 setup function?]
ref    testsuite/mk/boilerplate.mk:267:2:     Note [WayFlags]
ref    testsuite/tests/indexed-types/should_fail/ExtraTcsUntch.hs:30:27:     Note [Extra TcS Untouchables]
ref    testsuite/tests/perf/join_points/join005.hs:19:63:     Note [Don't CPR join points]
ref    testsuite/tests/perf/should_run/all.T:3:6:     Note [Solving from instances when interacting Dicts]
ref    testsuite/tests/polykinds/CuskFam.hs:16:11:     Note [Unifying implicit CUSK variables]
ref    testsuite/tests/simplCore/should_compile/T5776.hs:16:7:     Note [Simplifying RULE lhs constraints]
ref    testsuite/tests/simplCore/should_compile/simpl018.hs:3:7:     Note [Float coercions]
ref    testsuite/tests/typecheck/should_compile/CbvOverlap.hs:5:26:     Note [Type variable cycles in Givens]
ref    testsuite/tests/typecheck/should_compile/Improvement.hs:10:12:     Note [No reduction for Derived class constraints]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs.hs:7:7:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs.hs:21:43:     Note [Type variable cycles in Givens]
ref    testsuite/tests/typecheck/should_compile/LocalGivenEqs2.hs:4:6:     Note [When does an implication have given equalities?]
ref    testsuite/tests/typecheck/should_compile/T9117.hs:3:12:     Note [Order of Coercible Instances]
ref    testsuite/tests/typecheck/should_compile/tc200.hs:5:7:     Note [Multiple instantiation]
ref    testsuite/tests/typecheck/should_compile/tc228.hs:9:7:     Note [Inference and implication constraints]
ref    testsuite/tests/typecheck/should_compile/tc231.hs:12:16:     Note [Important subtlety in oclose]
ref    testsuite/tests/typecheck/should_fail/UnliftedNewtypesMultiFieldGadt.hs:11:28:     Note [Kind-checking the field type]
ref    testsuite/tests/typecheck/should_fail/tcfail093.hs:13:7:     Note [Important subtlety in oclose]
ref    validate:412:14:     Note [Why is there no stage1 setup function?]

